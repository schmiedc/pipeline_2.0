import ij.IJ;
import java.lang.Runtime;

fiji.plugin.Multi_View_Deconvolution.psfSize = 31;
fiji.plugin.Multi_View_Deconvolution.isotropic = true;

runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");

dir = System.getProperty( "dir" );
pattern_of_spim = System.getProperty( "pattern_of_spim" );
timepoint = System.getProperty( "timepoint" );
angles = System.getProperty( "angles" );
referencetp = System.getProperty( "referencetp" );

x = System.getProperty( "x" );
y = System.getProperty( "y" );
z = System.getProperty( "z" );
w = System.getProperty( "w" );
h = System.getProperty( "h" );
d = System.getProperty( "d" );

type_of_iteration = System.getProperty( "type_of_iteration" );
osem_acceleration = System.getProperty( "osem_acceleration" );
use_tikhonov_regularization = System.getProperty( "use_tikhonov_regularization" );
float Tikhonov_parameter = Float.parseFloat( System.getProperty( "Tikhonov_parameter" ) );
compute = System.getProperty( "compute" );
compute_on = System.getProperty( "compute_on" );
psf_estimation = System.getProperty( "psf_estimation" );
psf_display = System.getProperty( "psf_display" );
load_input_images_sequentially = System.getProperty( "load_input_images_sequentially" );
fused_image_output = System.getProperty( "fused_image_output" );

iter = System.getProperty( "iter" );

System.out.println( "dir=" + dir );
System.out.println( "pattern_of_spim=" + pattern_of_spim );
System.out.println( "timepoint=" + timepoint );
System.out.println( "angles=" + angles );
System.out.println( "reference timepoint=" +referencetp );
System.out.println( "cropping parameters=" + x + " " + y + " " + z + " " + w + " " + h + " " + d );
System.out.println( "type_of_iteration=" + type_of_iteration );
System.out.println( "osem_acceleration=" + osem_acceleration );
System.out.println( use_tikhonov_regularization );
System.out.println( "Tikhonov_parameter=" + Tikhonov_parameter );
System.out.println( "compute=" + compute );
System.out.println( "compute_on=" + compute_on );
System.out.println( "psf_estimation=" + psf_estimation );
System.out.println( "psf_display=" + psf_display );
System.out.println( load_input_images_sequentially );
System.out.println( "fused_image_output=" + fused_image_output );

IJ.run("Multi-view deconvolution", "spim_data_directory=" + dir + " " +
	"pattern_of_spim=" + pattern_of_spim + " " + 
	"timepoints_to_process=" + timepoint + " " +
	"angles=" + angles + " " + 
	"registration=[Time-point registration (reference=" + referencetp + ") of channel 1]" + " " +
	"crop_output_image_offset_x=" + x + " " +
	"crop_output_image_offset_y=" + y + " " +
	"crop_output_image_offset_z=" + z + " " +
	"crop_output_image_size_x=" + w + " " +
	"crop_output_image_size_y=" + h + " " +
	"crop_output_image_size_z=" + d + " " +
	"type_of_iteration=[" + type_of_iteration + "]" + " " +
	"osem_acceleration=[" + osem_acceleration + "]" + " " +
	"number_of_iterations=" + iter + " " + 
	" + use_tikhonov_regularization + " + " " + 
	"tikhonov_parameter=" + Tikhonov_parameter + " " +
//	"compute=[in 512x512x512 blocks]" + " " +
	"compute=[" + compute + "]" + " " +
	"compute_on=[" + compute_on + "]" + " " +  
	"psf_estimation=[" + psf_estimation + "]" + " " +
//	"psf_display=[" + psf_display + "]" + " " +
	"psf_display=[Do not show PSF's]" + " " +
	" + load_input_images_sequentially + " + " " +
	"fused_image_output=[" + fused_image_output + "]"
	);

/* shutdown */
runtime.exit(0);
